scripps::scripps_year(some_date = "2017-04-25")
scripps$rep2015$courses
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "n",
label   = "Sample Size (n)",
min     = 1,
max     = 1000,
value   = 200),
plotOutput(outputId = "hist")
)
foo <- function(n) {
hist(rnorm(n))
}
server <- function(input, output) {
output$hist <- renderPlot({ foo(input$n) })
}
shinyApp(ui = ui, server = server)
runApp('Pulpit/hist01')
ui <- fluidPage(
sliderInput(inputId = "n",
label   = "Sample Size (n)",
min     = 1,
max     = 1000,
value   = 200),
plotOutput(outputId = "hist"))
foo <- function(n) {
hist(rnorm(n))
}
server <- function(input, output) {
output$hist <- renderPlot({ foo(input$n) })
}
shinyApp(ui = ui, server = server)
list.files(path = "/home/kongra/Pulpit/", full.names = TRUE, recursive = TRUE)
list.files(path = "/home/kongra/Pulpit", full.names = TRUE, recursive = TRUE)
for (f in list.files(path       = "/home/kongra/Pulpit",
full.names =                  TRUE,
recursive  =                  TRUE)) {
cat(f)
}
for (f in list.files(path       = "/home/kongra/Pulpit",
full.names = TRUE,
recursive  = TRUE)) {
cat(f)
}
?list.files
library(dplyr)
library(tidyr)
2 ^ 100
2 ^ 5
kongRa::sample()
library(ggplot2)
packs <- c(
"AppliedPredictiveModeling",
"BH",
"CORElearn",
"DBI",
"MASS",
"MatrixModels",
"ModelMetrics",
"PKI",
"R6",
"RColorBrewer",
"RCurl",
"RJSONIO",
"Rcpp",
"RcppEigen",
"RgoogleMaps",
"Rserve",
"SparseM",
"SuppDists",
"assertthat",
"backports",
"base64enc",
"benchmarkme",
"benchmarkmeData",
"bitops",
"bookdown",
"brew",
"broom",
"caTools",
"car",
"caret",
"cellranger",
"colorspace",
"commonmark",
"crayon",
"crosstalk",
"curl",
"data.table",
"desc",
"devtools",
"dichromat",
"digest",
"dplyr",
"e1071",
"evaluate",
"feather",
"forcats",
"foreach",
"formatR",
"gbm",
"geosphere",
"ggmap",
"ggplot2",
"gistr",
"git2r",
"glmnet",
"globe",
"gridExtra",
"gtable",
"h2o",
"haven",
"hexbin",
"highr",
"hms",
"htmltools",
"htmlwidgets",
"httpuv",
"httr",
"ipred",
"iterators",
"jpeg",
"jsonlite",
"knitr",
"labeling",
"lattice",
"lava",
"lazyeval",
"leaflet",
"listviewer",
"lme4",
"lubridate",
"magrittr",
"mapproj",
"maps",
"markdown",
"memoise",
"microbenchmark",
"mime",
"minqa",
"mnormt",
"modelr",
"munsell",
"nloptr",
"numDeriv",
"nycflights13",
"openssl",
"packrat",
"pander",
"pbkrtest",
"plotly",
"plyr",
"png",
"praise",
"prodlim",
"profvis",
"proto",
"pryr",
"psych",
"purrr",
"quantreg",
"random",
"randomForest",
"raster",
"rbokeh",
"readr",
"readxl",
"rematch",
"replyr",
"reshape2",
"rjson",
"rmarkdown",
"roxygen2",
"rprojroot",
"rsconnect",
"rstudioapi",
"rticles",
"rvest",
"scales",
"selectr",
"shiny",
"sourcetools",
"sp",
"statmod",
"stringi",
"stringr",
"tau",
"testthat",
"tibble",
"tidyr",
"tidyverse",
"viridis",
"viridisLite",
"vtreat",
"whisker",
"withr",
"wrapr",
"xml2",
"xtable",
"yaml")
packs
length(packs)
install.packages(packs)
pkgs <- c(
"AppliedPredictiveModeling",
"BH",
"CORElearn",
"DBI",
"MASS",
"MatrixModels",
"ModelMetrics",
"PKI",
"R6",
"RColorBrewer",
"RCurl",
"RJSONIO",
"Rcpp",
"RcppEigen",
"RgoogleMaps",
"Rserve",
"SparseM",
"SuppDists",
"assertthat",
"backports",
"base64enc",
"benchmarkme",
"benchmarkmeData",
"bitops",
"bookdown",
"brew",
"broom",
"caTools",
"car",
"caret",
"cellranger",
"colorspace",
"commonmark",
"crayon",
"crosstalk",
"curl",
"data.table",
"desc",
"devtools",
"dichromat",
"digest",
"dplyr",
"e1071",
"evaluate",
"feather",
"forcats",
"foreach",
"formatR",
"gbm",
"geosphere",
"ggmap",
"ggplot2",
"gistr",
"git2r",
"glmnet",
"globe",
"gridExtra",
"gtable",
"h2o",
"haven",
"hexbin",
"highr",
"hms",
"htmltools",
"htmlwidgets",
"httpuv",
"httr",
"ipred",
"iterators",
"jpeg",
"jsonlite",
"knitr",
"labeling",
"lattice",
"lava",
"lazyeval",
"leaflet",
"listviewer",
"lme4",
"lubridate",
"magrittr",
"mapproj",
"maps",
"markdown",
"memoise",
"microbenchmark",
"mime",
"minqa",
"mnormt",
"modelr",
"munsell",
"nloptr",
"numDeriv",
"nycflights13",
"openssl",
"packrat",
"pander",
"pbkrtest",
"plotly",
"plyr",
"png",
"praise",
"prodlim",
"profvis",
"proto",
"pryr",
"psych",
"purrr",
"quantreg",
"random",
"randomForest",
"raster",
"rbokeh",
"readr",
"readxl",
"rematch",
"replyr",
"reshape2",
"rjson",
"rmarkdown",
"roxygen2",
"rprojroot",
"rsconnect",
"rstudioapi",
"rticles",
"rvest",
"scales",
"selectr",
"shiny",
"sourcetools",
"sp",
"statmod",
"stringi",
"stringr",
"tau",
"testthat",
"tibble",
"tidyr",
"tidyverse",
"viridis",
"viridisLite",
"vtreat",
"whisker",
"withr",
"wrapr",
"xml2",
"xtable",
"yaml")
pkgs
library(ggplot2)
library(data.table)
install.packages("/home/kongra/Devel/Projects/Sharon/2017-04-24 Meetup/claffey_1.0.tar.gz")
install.packages("/home/kongra/Devel/Projects/Sharon/2017-04-24 Meetup/claffey_1.0.tar.gz", ty)
install.packages("/home/kongra/Devel/Projects/Sharon/2017-04-24 Meetup/claffey_1.0.tar.gz", type = "source")
table?
;
?table
27 * 50
exit()
quit()
install.packages(c("glmnet", "h2o", "htmltools", "psych", "RcppEigen", "tidyr"))
new.env()
NULL | 123
NULL || 123
NULL | 123
4 | 123
typeof(1:3)
class(1:3)
c(1, 2, "three")
capColor = c(huey = "red", duey = "blue", louie = "green")
capColor["louie"]
names(capColor)
names(capColor)[capColor == "blue"]
x <- c(4, 7, 6, 5, 2, 8)
x < 5
x < 6
x > 7
x[c(-1, -2)]
x[-1]
x[-2]
L <- list(x = c(1:5), y = c("a", "b", "c"), z = capColor)
(str(L))
str(L)
str(L)
(str(L))
str(L)
L[1]
L[2]
L[3]
L[3]$z
L[[3]]
d <- data.frame(x = 1:10, y = letters[1:10], z = LETTERS[1:10])
d
d[1]
d[, 1]
d[, "x"]
d[, "x", drop = FALSE]
NA == NA
TRUE | NA
NA | TRUE
length(c(NA, NA))
length(c(1, 2, NULL, 3))
x <- NULL
c(x, 4)
is.integer(c(NA))
NaN + 1
exp(NaN)
is.logical(1)
is.logical(TRUE)
is.logical(FALSE)
setwd("~/Devel/Projects/Present/WawaJava/html/Ragent")
library(data.table)
library(ggplot2)
library(shiny)
library(chR)
dt <- fread("offers.csv")
m1 <- lm(formula = price~area, data = dt)
str(m1)
summary(m1)
suggest <- function(area) chDouble({
chNumeric(area)
predict(m1, data.table(area = area))[[1]]
})
suggest(5)
suggest(100)
suggest(25)
generatePlot <- function(area) chGgplot({
a1 <- aes(x = area, y = price)
s  <- suggest(area)
ggplot(data = dt) + geom_point(a1, shape = 19, alpha = 0.25) +
geom_smooth(a1, method = "lm") +
geom_vline(xintercept = area, linetype = "dotted") +
geom_hline(yintercept = s, linetype = "dotted") +
ggtitle(paste("Suggested price is", s, "PLN"))
})
area <- 38
predict(m1, data.table(area = area))
chs(predict(m1, data.table(area = area)))
as.double(chs(predict(m1, data.table(area = area))))
as.numeric(chs(predict(m1, data.table(area = area))))
predict(m1, data.table(area = area))
class(predict(m1, data.table(area = area)))
predict(m1, data.table(area = area))
generatePlot <- function(area) chGgplot({
chNumeric(area)
a1 <- aes(x = area, y = price)
s  <- suggest(area)
ds <- format(round(s, 2), nsmall = 2)
ggplot(data = dt) + geom_point(a1, shape = 19, alpha = 0.25) +
geom_smooth(a1, method = "lm") +
geom_vline(xintercept = area, linetype = "dotted") +
geom_hline(yintercept = s, linetype = "dotted") +
ggtitle(paste("Suggested price is", ds, "PLN"))
})
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github("kongra/chR")
microbenchmark::microbenchmark(suggest(23.5))
dt <- fread("offers.csv")
View(dt)
suggest(38)
suggest(45)
suggest(64)
microbenchmark::microbenchmark(suggest(45))
suggest(-64)
chDouble(1)
chDouble(.5)
chDouble("abcd")
suggest("abcd")
suggest(NULL)
suggest(NA)
suggest(NaN)
MIN_AREA <- 10
MAX_AREA <- 200
areaInRange <- function (area) {
area >= MIN_AREA && area <= MAX_AREA
}
chArea <- chAnd(chNumeric, chP(areaInRange))
suggest <- function(area) chDouble({
chArea(area)
predict(m1, data.table(area = area))[[1]]
})
chArea(3)
chArea(10)
chArea(0.99999)
chArea(1000)
chArea(200)
chArea(NaN)
is.nan(NaN)
is.nan(1)
chArea <- chAnd(chNumeric, chP(function(x) !is.nan(x)), chP(areaInRange))
suggest <- function(area) chDouble({
chArea(area)
predict(m1, data.table(area = area))[[1]]
})
chArea(NaN)
chArea(10)
chArea(200)
chArea(45.5)
chArea(NaN)
chArea(NULL)
runApp()
microbenchmark::microbenchmark(suggest(45.5))
rm(list = ls())
