g(x)
g(x + y ^ 2 / z + exp(a * sin(b)))
quote(x <- 2)
eval(quote(x <- 2))
x
install.packages("replyr")
install.packages("vtreat")
install.packages("random")
random::randomNumbers(100)
install.packages("MXNetR")
install.packages(c("h2o", "roxygen2"))
demo()
demo(plotmath)
install.packages("rJava")
rnorm(100)
pryr::mem_used()
kongRa::rgc()
kongRa::memuse()
pryr::mem_used()
library(tidyverse)
map_lgl
tibble(x = rnorm(100))
summary(tibble(x = rnorm(100)))
install.packages("listviewer")
listviewer::
listviewer::jsonedit(list(x = rnorm(100)))
library(stringr)
str_interp("aaa")
str_interp("${name} is great")
name <- "Konrad"
str_interp("${name} is great")
shiny::actionLink("256", "aaa")
install.packages("broom")
broom::tidy
sample.int(10)
set.seed(12345)
sample.int(10)
x <- seq.int(from = 0, length.out = 100)
x
x <- seq.int(from = 1, length.out = 100)
x
x
pryr::object_size(x)
rm(x)
pryr::mem_used()
kongRa::rgc
kongRa::rgc()
pryr::mem_used()
packageVersion("shiny")
Sys.getenv("R_LIBS_USER")
Sys.chmod
rbind
anova
?anova
x <- seq.int(from = 0, length.out = 1000)
y <- 2 * x + 3 + rnorm(1000, sd = 10)
y
x
library(ggplot2)
plot(x, y)
m1 <- lm(data = data.frame(x = x, y = y), formula = y ~ x)
m1
summary(m1)
anova(m1)
summary(anova(m1))
USAccDeaths
USArrests
library("benchmarkme")
install.packages("benchmarkme")
benchmarkme::get_linear_algebra()
benchmarkme::benchmark_std()
benchmarkme::benchmark_std
library(benchmarkme)
benchmark_std()
pryr::mem_used()
seq_len(100)
message("aaa")
library(tibble)
tibble(x = x, y = y)
tibble
dt <- tibble(x = seq.int(from = 1, length.out = 1000), y = x)
dt
dt <- tibble(x = seq.int(from = 1, length.out = 1000), y = 2 * x + 3 + rnorm(1000))
dt
pryr::object_size(dt)
dt$x
typeof(dt$x)
install.packages("profvis")
benchmarkme::get_cpu()
benchmarkme::get_ram()
library(benchmarkme)
r1 <- benchmark_std()
r1
plot(r1)
apropos("assert")
apropos("type")
?typeof
x <- rnorm(n = 7.5e6)
str(x)
summary(x)
pryr::object_size(x)
x <- seq.int(from = 0, length.out = 7.5e6)
x
pryr::object_size(x)
benchmarkme::get_linear_algebra()
benchmarkme::get_linear_algebra()
benchmarkme::get_cpu()
benchmarkme::get_r_version()
benchmarkme::get_platform_info()
install.packages("htmlwidgets")
install.packages("leaflet")
install.packages("nycflights13")
packageVersion("plotly")
install.packages(c("h2o", "leaflet", "replyr", "stringr", "tau"))
tau::tokenize("aaa")
tau::tokenize("aaa bb ccc")
tau::tokenize("aaa bb ccc")
apropos("svm")
library(dplyr)
library(tibble)
?seq
dt <- tibble(x = seq(from = -5, to = 5, length.out = 1e3), y = 2 * x + 3 + rnorm(1e3))
dt
pryr::obj
pryr::object_size(dt)
dt <- tibble(x = seq(from = -5, to = 5, length.out = 1e3), y = 2 * x + 3 + rnorm(1e3))
sys.time(dt <- tibble(x = seq(from = -5, to = 5, length.out = 1e3), y = 2 * x + 3 + rnorm(1e3)))
Sys.time(dt <- tibble(x = seq(from = -5, to = 5, length.out = 1e3), y = 2 * x + 3 + rnorm(1e3)))
microbenchmark::microbenchmark(dt <- tibble(x = seq(from = -5, to = 5, length.out = 1e3), y = 2 * x + 3 + rnorm(1e3)))
microbenchmark::microbenchmark(dt <- tibble(x = seq(from = -5, to = 5, length.out = 1e3), y = 2 * x + 3 + rnorm(1e3)))
16 * 16
9 * 9
3.40 * 2
2003 - 1965
2004 - 1965
2005 - 1965
144 / 9
165 - 180
library(tibble)
137 - 120
17 * 3000 / 40000
22 * 3000 / 40000
649-653
1.15 * 4 * 3000 / 40000
4 * 3000 / 40000
install.packages(c("commonmark", "ipred", "jsonlite", "statmod"))
119 - 104
15 * 3000 / 40000
20 * 3000 / 40000
10 * 3000 / 40000
210-195
15 * 3000 / 40000
212-226
14 * 3000 / 40000
228-241
13 * 3000 / 40000
141-158
17 * 3000 / 40000
242 * 3000 / 40000
127 * 3000 / 40000
4 * 3000 / 40000
299-311
13 * 3000 / 40000
10 * 3000 / 40000
11 * 3000 / 40000
1995 - 1959
1996 - 1959
20066 - 1959
2006 - 1959
2011 - 1959
2013 - 1959
1984 - 1959
538 + 129
6 * 3000 / 40000
16 * 3000 / 40000
17 * 3000 / 40000
242 * 3000 / 40000
158 - 141 + 1
18 * 3000 / 40000
16 * 3000 / 40000
20 * 3000 / 40000
10 * 3000 / 40000
5 * 3000 / 40000
480 * 3000 / 40000
4 * 3000 / 40000
50000 / 12
50000 / 12 * 3
50000 / 12 * 4
log(1e6, base = 2)
14.49 + 7.90
22.39 * 4
27 * 4.33
10 * 3000 / 40000
332-319
13 * 3000 / 40000
12 * 3000 / 40000
426-412]
426-412
14 * 3000 / 40000
14 * 3000 / 40000
(737-726 + 1) * 3000 / 40000
78 * 3000 / 40000
28 * 3000 / 40000
27 * 3000 / 40000
(185-178 + 1) * 3000 / 40000
2112 * 3000 / 40000
2014 * 3000 / 40000
1610 * 3000 / 40000
176 * 3000 / 40000
1620 * 3000 / 40000
8 * 3000 / 40000
10 * 3000 / 40000
13 * 3000 / 40000
8 * 3000 / 40000
12 * 3000 / 40000
35 * 3000 / 40000
9 * 3000 / 40000
13 * 3000 / 40000
11 * 3000 / 40000
17 * 3000 / 40000
(296-289) * 3000 / 40000
90 * 3000 / 40000
14 * 3000 / 40000
36 - 21
15 * 3000 / 40000
52 - 37 + 1
16 * 3000 / 40000
12 * 3000 / 40000
81 - 65
15 * 3000 / 40000
41 - 9
32 * 3000 / 40000
21 - 7
14 * 3000 / 40000
102 - 95
7 * 3000 / 40000
install.packages(c("CORElearn", "curl", "DBI", "gbm", "lattice", "lava", "pbkrtest", "prodlim", "psych", "Rcpp", "RcppEigen", "readr", "replyr", "rmarkdown", "SparseM", "stringi", "viridis", "viridisLite", "wrapr"))
kongRa::rgc()
install.packages(c("DBI", "jsonlite", "shiny", "sourcetools", "stringi", "tibble"))
install.packages(c("assertthat", "caret", "curl", "h2o", "quantreg", "readxl", "replyr", "vtreat", "wrapr"))
package_version("caret")
package_version(caret)
1 + 34
2 * 10
exit()
quit)()
library(caret)
caret::train()
2 * 3
e1071::skewness(rnorm(100))
e1071::skewness(rnorm(100))
e1071::skewness(rnorm(100))
e1071::skewness(rnorm(100))
e1071::skewness(rnorm(10000))
e1071::skewness(rnorm(10000))
e1071::skewness(rnorm(10000))
pryr::bits(123)
pryr::bits(1)
pryr::bits(0)
pryr::bits(-1)
jsonlite::base64_enc("123")
kongRa::rgc()
kongRa::memuse()
install.packages("Rserve")
install.packages(c("gistr", "lme4", "markdown", "MASS", "memoise", "shiny", "SparseM"))
library(shiny)
ui <- fluidPage()
ui
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage("Witaj Świecie ąęśćółżźń")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui
ui <- fluidPage(
numericInput(inputId = "n",
label   = "Sample Size (n)",
min     = 1,
max     = 100,
value   = 25),
plotOutput("hist")
)
ui
ui <- fluidPage(
numericInput(inputId = "n",
label   = "Sample Size (n)",
min     = 1,
max     = 100,
value   = 25),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "n",
label   = "Sample Size (n)",
min     = 1,
max     = 1000,
value   = 200),
plotOutput(outputId = "hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "n",
label   = "Sample Size (n)",
min     = 1,
max     = 1000,
value   = 200),
plotOutput(outputId = "hist")
)
foo <- function(n) {
hist(rnorm(n))
}
server <- function(input, output) {
output$hist <- renderPlot({ foo(input$n) })
}
shinyApp(ui = ui, server = server)
kongRa::rgc()
pryr::mem_used()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='kongra',
token='9A3238CF2D6FA454986C44BFE24BEF4D',
secret='6XO/PbZZBkq+rc706R8VBVssCS0NFgOz5EeTNMfS')
runApp('Pulpit/hist01')
list.files(path = "/home/kongra/Pulpit/", full.names = TRUE, recursive = TRUE)
list.files(path = "/home/kongra/Pulpit", full.names = TRUE, recursive = TRUE)
library(scripps)
scripps::scripps_year()
scripps::scripps_year(some_date = "2017-04-25")
scripps$rep2015$courses
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "n",
label   = "Sample Size (n)",
min     = 1,
max     = 1000,
value   = 200),
plotOutput(outputId = "hist")
)
foo <- function(n) {
hist(rnorm(n))
}
server <- function(input, output) {
output$hist <- renderPlot({ foo(input$n) })
}
shinyApp(ui = ui, server = server)
runApp('Pulpit/hist01')
ui <- fluidPage(
sliderInput(inputId = "n",
label   = "Sample Size (n)",
min     = 1,
max     = 1000,
value   = 200),
plotOutput(outputId = "hist"))
foo <- function(n) {
hist(rnorm(n))
}
server <- function(input, output) {
output$hist <- renderPlot({ foo(input$n) })
}
shinyApp(ui = ui, server = server)
list.files(path = "/home/kongra/Pulpit/", full.names = TRUE, recursive = TRUE)
list.files(path = "/home/kongra/Pulpit", full.names = TRUE, recursive = TRUE)
for (f in list.files(path       = "/home/kongra/Pulpit",
full.names =                  TRUE,
recursive  =                  TRUE)) {
cat(f)
}
for (f in list.files(path       = "/home/kongra/Pulpit",
full.names = TRUE,
recursive  = TRUE)) {
cat(f)
}
?list.files
library(dplyr)
library(tidyr)
530000 / 177
setwd("~/Pulpit/Ragent")
library(data.table)
dt <- fread("otodom.csv")
dt <- fread("offers.csv")
View(dt)
dt <- fread("offers.csv")
View(dt)
library(ggplot2)
ggplot(data = dt) + geom_point(aes(x = area, y = price))
ggplot(data = dt) + geom_point(aes(x = area, y = price), alpha = 0.25)
ggplot(data = dt) + geom_point(aes(x = area, y = price), alpha = 0.25) +
geom_smooth()
dt <- fread("offers.csv")
a1 <- aes(x = area, y = price)
ggplot(data = dt) + geom_point(a1, alpha = 0.25) +
geom_smooth(a1)
ggplot(data = dt) + geom_point(a1, alpha = 0.25) +
geom_smooth(method = "lm")
ggplot(data = dt) + geom_point(a1, alpha = 0.25) +
geom_smooth(a1, method = "lm")
m1 <- lm(formula = price~area, data = dt)
summary(m1)
m1$coefficients
B0 <- m1$coefficients[0]
B0
B0 <- m1$coefficients[[0]]
B0 <- m1$coefficients[0]
B0 <- m1$coefficients[0]
B1 <- m1$coefficients[1]
B1
B0
B0 <- m1$coefficients[2]
B0
B0 * 23
suggest <- function(area) {
B0 + B1 * area
}
suggest(100)
B0
B0 <- m1$coefficients[1]
B1 <- m1$coefficients[2]
suggest <- function(area) {
B0 + B1 * area
}
suggest(100)
suggest(55)
predict(m1, 100)
predict(m1, data.table(x = 10))
predict(m1, data.table(area = 10))
predict(m1, data.table(area = 100))
predict(m1, data.table(area = 100))[1]
predict(m1, data.table(area = 100))[[1]]
suggest <- function(area) {
predict(m1, data.table(area = area))[[1]]
}
suggest(100)
suggest(10)
suggest(55)
library(data.table)
library(ggplot2)
dt <- fread("offers.csv")
a1 <- aes(x = area, y = price)
m1 <- lm(formula = price~area, data = dt)
suggest <- function(area) {
predict(m1, data.table(area = area))[[1]]
}
library(data.table)
library(ggplot2)
dt <- fread("offers.csv")
a1 <- aes(x = area, y = price)
m1 <- lm(formula = price~area, data = dt)
suggest <- function(area) {
predict(m1, data.table(area = area))[[1]]
}
ggplot(data = dt) + geom_point(a1, alpha = 0.25) +
geom_smooth(a1, method = "lm")
ggplot(data = dt) + geom_point(a1, alpha = 0.25) +
geom_smooth(a1, method = m1)
ggplot(data = dt) + geom_point(a1, alpha = 0.25) +
geom_smooth(a1, method = "loess")
ggplot(data = dt) + geom_point(a1, alpha = 0.25) +
geom_smooth(a1, method = "lm")
ggplot(data = dt) + geom_point(a1, shape = 19, alpha = 0.25) +
geom_smooth(a1, method = "lm")
ggplot(data = dt) + geom_point(a1, shape = 19, alpha = 0.25) +
geom_smooth(a1, method = "lm", formula = price~area)
ggplot(data = dt) + geom_point(a1, shape = 19, alpha = 0.25) +
geom_smooth(a1, method = "lm", formula = y~x)
ggplot(data = dt) + geom_point(a1, shape = 19, alpha = 0.25) +
geom_smooth(a1, method = "lm") +
geom_hline(yintercept = 100000)
ggplot(data = dt) + geom_point(a1, shape = 19, alpha = 0.25) +
geom_smooth(a1, method = "lm") +
geom_hline(yintercept = -10000)
ggplot(data = dt) + geom_point(a1, shape = 19, alpha = 0.25) +
geom_smooth(a1, method = "lm") +
geom_vline(xintercept = 100, linetype = "dotted")
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "n",
label   = "Sample Size (n)",
min     = 1,
max     = 1000,
value   = 200),
plotOutput(outputId = "hist"))
ui
foo <- function(n) {
hist(rnorm(n))
}
foo(100)
rnorm(100)
rnorm(100)
foo(10000)
runApp('~/Pulpit/hist01')
library(shiny)
runApp()
runApp()
runApp()
runApp()
paste(c("aaa", 245, "aaa"))
paste("aaa", 34, "aaa")
runApp()
